#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <fstream>
#include <chrono>

using namespace std;

vector<string> singleA(1), singleB(1);
string singleA, singleB;

ofstream file1("1100_dotmat.txt");
ofstream coords_file("1100_coords.txt");
ofstream file3("1100_alignments.txt");

struct Node {
    Node(int dato) : value(dato) {
        path.push_back(nullptr);
        path.push_back(nullptr);
        path.push_back(nullptr);
    }
    int value;
    vector<Node *> path;
};

void Print_Mat(const vector<vector<Node>> &mat) {
    int n = mat.size();
    int m = mat[0].size();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cout << mat[i][j].value << "\t";
        }
        cout << endl;
    }
}

void All_Alignments(Node* node, string s, string t, int it, int jt) {
    int num = 0;
    string tmpA = singleA[singleA.size()-1];
    string tmpB = singleB[singleB.size()-1];

    if(node->path[0] != nullptr){
        singleA[singleA.size()-1] += s[it];
        singleB[singleB.size()-1] += t[jt];
        All_Alignments(node->path[0], s, t, it - 1, jt - 1);
        num++;
    }
    if(node->path[1] != nullptr){
        if(num){
            singleA.push_back(tmpA);
            singleB.push_back(tmpB);
        }
        singleA[singleA.size()-1] += s[it];
        singleB[singleB.size()-1] += '-';
        All_Alignments(node->path[1], s, t, it - 1, jt);
        num++;
    }
    if(node->path[2] != nullptr){
        if(num){
            singleA.push_back(tmpA);
            singleB.push_back(tmpB);
        }
        singleA[singleA.size()-1] += '-';
        singleB[singleB.size()-1] += t[jt];
        All_Alignments(node->path[2], s, t, it, jt - 1);
    }
}

void Single_Alignment(Node* node, string s, string t, int it, int jt) {
    coords_file << to_string(it) + " " + to_string(jt) + "\n";

    if(node->path[0] != nullptr) {
        singleA += s[it];
        singleB += t[jt];
        Single_Alignment(node->path[0], s, t, it - 1, jt - 1);
    }
    else if(node->path[1] != nullptr) {
        singleA += s[it];
        singleB += '-';
        Single_Alignment(node->path[1], s, t, it - 1, jt);
    }
    else if(node->path[2] != nullptr) {
        singleA += '-';
        singleB += t[jt];
        Single_Alignment(node->path[2], s, t, it, jt - 1);
    }
}

void Neddleman_Wunch(string s, string t)    {
    auto start = chrono::high_resolution_clock::now();
    s = "-" + s;
    t = "-" + t;
    int n = s.length();
    int m = t.length();

    vector<vector<Node>> mat(n, vector<Node>(m, Node(0)));

    for (int j = 0, val = 0; j < m; ++j, val -= 2) {
        mat[0][j].value = val;
        if(j) mat[0][j].path[2] = &mat[0][j - 1];
    }

    for (int i = 0, val = 0; i < n; ++i, val -= 2) {
        mat[i][0].value = val;
        if(i) mat[i][0].path[1] = &mat[i - 1][0];
    }

    string point_row;

    for (int i = 1; i < n; ++i) {
        point_row = "";
        for (int j = 1; j < m; ++j) {
            int score = (s[i] == t[j]) ? 1 : -1;

            if (score == 1) point_row += ".";
            else point_row += "-";

            mat[i][j].value = max(mat[i - 1][j - 1].value + score,
                                  max(mat[i - 1][j].value - 2, mat[i][j - 1].value - 2));

            if (mat[i - 1][j - 1].value + score == mat[i][j].value)
                mat[i][j].path[0] = &mat[i - 1][j - 1];
            if (mat[i - 1][j].value - 2 == mat[i][j].value)
                mat[i][j].path[1] = &mat[i - 1][j];
            if (mat[i][j - 1].value - 2 == mat[i][j].value)
                mat[i][j].path[2] = &mat[i][j - 1];
        }
        point_row += '\n';
        file1 << point_row;
    }

    file1.close();
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> elapsed_nw = end - start;

    /*cout << "--- FINAL MATRIX ---" << endl;
    Print_Mat(mat);

    cout << "--- CHILDREN MATRIX ---" << endl;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            for (Node* child : mat[i][j].path)
                if(child != nullptr) cout << child->value << ' ';
            cout << '\t';
        }
        cout << endl;
    }*/

    //cout << "--- SCORE ---" << endl;
    //cout << mat[n-1][m-1].value << endl;

    //cout << "--- ALIGNMENTS ---" << endl;

    start = chrono::high_resolution_clock::now();

    Single_Alignment(&mat[n - 1][m - 1], s, t, n - 1, m - 1);
    coords_file.close();

    end = chrono::high_resolution_clock::now();
    chrono::duration<double> elapsed_single = end - start;


    chrono::duration<double> elapsed_all = chrono::seconds(0);
    /*start = chrono::high_resolution_clock::now();

    All_Alignments(&mat[n - 1][m - 1], s, t, n - 1, m - 1);

    end = chrono::high_resolution_clock::now();
    elapsed_all = end - start; */

    s.erase(0, 1);
    t.erase(0, 1);

    file3 << s + "\n" + t + "\n\nScore " + to_string(mat[n-1][m-1].value) + "\n\n";
    file3 << "Time Neddleman_Wunch " + to_string(elapsed_nw.count())
            + "\nTime Find_Optimal_Alignment " + to_string(elapsed_single.count())
            + "\nTime All_Alignments " + to_string(elapsed_all.count()) + "\n\n";

    reverse(singleA.begin(), singleA.end());
    reverse(singleB.begin(), singleB.end());
    file3 << singleA + "\n" + singleB + "\n\n";

    /*for(int i = 0; i < singleA.size(); ++i) {
        reverse(singleA[i].begin(), singleA[i].end());
        reverse(singleB[i].begin(), singleB[i].end());
        file3 << singleA[i] + "\n" + singleB[i] + "\n\n";
        //cout << singleA[i] << endl << singleB[i] << endl << endl;
    }*/

    file3.close();
}

int main() {
    string t, s;
    cout << "--- INPUT ---" << endl;
    cout << "String A : "; cin >> s;
    cout << "String B : "; cin >> t;

    Neddleman_Wunch(s, t);

    return 0;
}

