#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

struct Node {
    Node(int dato) : value(dato) {
        visited = false;
    }
    int value;
    bool visited;
    vector<Node *> path;
};

void Print_Mat(const vector<vector<Node>> &mat) {
    int n = mat.size();
    int m = mat[0].size();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cout << mat[i][j].value << "\t";
        }
        cout << endl;
    }
}

void DFS(Node* node, vector<vector<Node>> &mat) {
    //node->visited = true;
    cout << node->value << ' ';
    if(node->path.empty()) cout << endl;

    for (Node* child : node->path)
        //if(!child->visited)
            DFS(child, mat);

}

void Neddleman_Wunch(string s, string t)    {
    s = "-" + s;
    t = "-" + t;
    int n = s.length();
    int m = t.length();

    vector<vector<Node>> mat(n, vector<Node>(m, Node(0)));

    for (int j = 0, val = 0; j < m; ++j, val -= 2) {
        mat[0][j].value = val;
        if(j) mat[0][j].path.push_back(&mat[0][j - 1]);
    }

    for (int i = 0, val = 0; i < n; ++i, val -= 2) {
        mat[i][0].value = val;
        if(i) mat[i][0].path.push_back(&mat[i - 1][0]);
    }

    for (int i = 1; i < n; ++i) {
        for (int j = 1; j < m; ++j) {
            vector<int> nums;
            if (s[i] == t[j])
                nums.push_back(mat[i - 1][j - 1].value + 1);
            else
                nums.push_back(mat[i - 1][j - 1].value - 1);

            nums.push_back(mat[i - 1][j].value - 2);
            nums.push_back(mat[i][j - 1].value - 2);

            int maximo = max(nums[0], max(nums[1], nums[2]));
            if (nums[0] == maximo)
                mat[i][j].path.push_back(&mat[i - 1][j - 1]);
            if (nums[1] == maximo)
                mat[i][j].path.push_back(&mat[i - 1][j]);
            if (nums[2] == maximo)
                mat[i][j].path.push_back(&mat[i][j - 1]);

            mat[i][j].value = maximo;
        }
    }

    cout << "--- FINAL MATRIX ---" << endl;
    Print_Mat(mat);

    cout << "--- PATHS ---" << endl;
    DFS(&mat[n - 1][m - 1], mat);

    /*for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            for (Node* child : mat[i][j].path)
                cout << child->value << ' ';
            cout << '\t';
        }
        cout << endl;
    }*/

}

int main() {
    string t, s;
    cout << "--- INPUT ---" << endl;
    cout << "String A : "; cin >> s;
    cout << "String B : "; cin >> t;

    Neddleman_Wunch(s, t);

    return 0;
}

